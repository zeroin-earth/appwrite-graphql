scalar JSON
scalar Date

schema {
  query: Query
  mutation: Mutation
}

type Query {
  accountGet: User
  accountGetPrefs: Preferences
  accountGetMfaRecoveryCodes: MFARecoveryCodes
  accountGetSession(sessionId: String!): Session
  accountListIdentities(queries: [String!]): IdentityList
  accountListLogs(queries: [String!]): LogsList
  accountListMfaFactors: MFAFactors
  accountListSessions: SessionList
  databasesGetDocument(databaseId: String!, collectionId: String!, documentId: String!): Document
  databasesListDocuments(
    databaseId: String!
    collectionId: String!
    queries: [String!]
  ): DocumentList
  functionsGetExecution(functionId: String!, executionId: String!): Execution
}

type Mutation {
  accountCreate(userId: String!, email: String!, password: String!, name: String): User
  accountCreateAnonymousSession: Session
  accountCreateEmailPasswordSession(email: String!, password: String!): Session
  accountCreateJWT: JWT
  accountCreateEmailToken(userId: String!, email: String!, phrase: Boolean): Token
  accountCreateMagicURLSession(userId: String!, email: String!, url: String): Token
  accountCreateMagicURLToken(userId: String!, email: String!, url: String, phrase: Boolean): Token
  accountCreateMfaAuthenticator(type: String!): MFAType
  accountCreateMfaChallenge(factor: String!): MFAChallenge
  accountCreateMfaRecoveryCodes: MFARecoveryCodes
  accountCreatePhoneSession(userId: String!, phone: String!): Token
  accountCreatePhoneToken(userId: String!, phone: String!): Token
  accountCreatePhoneVerification: Token
  accountCreateRecovery(email: String!, url: String!): Token
  accountCreateSession(userId: String!, secret: String!): Session
  accountCreateVerification(url: String!): Token
  accountDeleteIdentity(identityId: String!): Status
  accountDeleteMfaAuthenticator(type: String!, otp: String!): User
  accountDeleteSession(sessionId: String!): Status
  accountDeleteSessions: Status
  accountUpdateEmail(email: String!, password: String!): User
  accountUpdateMagicURLSession(userId: String!, secret: String!): Session
  accountUpdateMFA(mfa: Boolean!): User
  accountUpdateMfaAuthenticator(type: String!, otp: String!): User
  accountUpdateMfaChallenge(challengeId: String!, otp: String!): Status
  accountUpdateMfaRecoveryCodes: MFARecoveryCodes
  accountUpdateName(name: String!): User
  accountUpdatePassword(password: String!, oldPassword: String!): User
  accountUpdatePhone(phone: String!, password: String!): User
  accountUpdatePhoneSession(userId: String!, secret: String!): Session
  accountUpdatePhoneVerification(userId: String!, secret: String!): Token
  accountUpdatePrefs(prefs: JSON!): User
  accountUpdateRecovery(
    userId: String!
    secret: String!
    password: String!
    passwordAgain: String!
  ): Token
  accountUpdateSession(sessionId: String!): Session
  accountUpdateVerification(userId: String!, secret: String!): Token
  databasesCreateDocument(
    databaseId: String!
    collectionId: String!
    documentId: String!
    data: JSON!
    permissions: [String!]
  ): Document
  databasesDeleteDocument(databaseId: String!, collectionId: String!, documentId: String!): Status
  databasesUpdateDocument(
    databaseId: String!
    collectionId: String!
    documentId: String!
    data: JSON
    permissions: [String!]
  ): Document
  functionsCreateExecution(
    functionId: String!
    body: String
    async: Boolean
    path: String
    method: String
    headers: JSON
  ): Execution
}

type User {
  _id: String
  _createdAt: Date
  _updatedAt: Date
  name: String
  registration: String
  status: String
  labels: [String]
  email: String
  phone: String
  emailVerification: Boolean
  phoneVerification: Boolean
  mfa: Boolean
  accessedAt: String
  prefs: Preferences
  targets: [Target]
  accessedAt: String
}

type Target {
  _id: String
  _createdAt: Date
  _updatedAt: Date
  name: String
  userId: String
  providerId: String
  providerType: String
  identifier: String
}

type Preferences {
  data: JSON
}

type Session {
  _id: String
  _createdAt: Date
  userId: String
  expire: Date
  provider: String
  providerUid: String
  providerAccessToken: String
  providerAccessTokenExpiry: Date
  providerRefreshToken: String
  ip: String
  osCode: String
  osName: String
  osVersion: String
  clientType: String
  clientCode: String
  clientName: String
  clientVersion: String
  clientEngine: String
  clientEngineVersion: String
  deviceName: String
  deviceBrand: String
  deviceModel: String
  countryCode: String
  countryName: String
  current: Boolean
  factors: [String]
  secret: String
  mfaUpdatedAt: Date
}

type SessionList {
  total: Int
  sessions: [Session]
}

type DocumentList {
  total: Int
  documents: [Document]
}

type Document {
  _id: String
  _collectionId: String
  _databaseId: String
  _createdAt: String
  _updatedAt: String
  _permissions: [String]
  data: JSON
}

type Token {
  _id: String
  _createdAt: String
  userId: String
  secret: String
  expire: Date
  phrase: String
}

type Execution {
  _id: String
  _createdAt: String
  _updatedAt: String
  functionId: String
  trigger: String
  status: String
  requestMethod: String
  requestPath: String
  responseStatusCode: Int
  responseBody: String
  errors: String
  duration: Float
}

type Status {
  status: Boolean
}

type JWT {
  jwt: String
}

type IdentityList {
  total: Int!
  identities: [Identity!]
}

type Identity {
  _id: String
  _createdAt: String
  _updatedAt: String
  userId: String
  provider: String
  providerUid: String
  providerEmail: String
  providerAccessToken: String
  providerAccessTokenExpiry: String
  providerRefreshToken: String
}

type LogsList {
  total: Int!
  logs: [Log!]
}

type Log {
  _id: String
  _createdAt: String
  _updatedAt: String
  event: String
  userId: String
  userEmail: String
  userName: String
  mode: String
  ip: String
  time: String
  osCode: String
  osName: String
  osVersion: String
  clientType: String
  clientCode: String
  clientName: String
  clientVersion: String
  clientEngine: String
  clientEngineVersion: String
  deviceName: String
  deviceBrand: String
  deviceModel: String
  countryCode: String
  countryName: String
}

type MFAType {
  secret: String
  uri: String
}

type MFAChallenge {
  _id: String
  _createdAt: Date
  userId: String
  expire: Date
}

type MFAFactors {
  totp: Boolean
  phone: Boolean
  email: Boolean
}

type MFARecoveryCodes {
  recoveryCodes: [String!]!
}
